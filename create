#!/usr/bin/env ruby

# Example:
#   ./create --org gilt --app quality --db_name quality --db_user api
#
# All parameters are optional - you will be prompted to specify each as needed

load File.join(File.dirname(__FILE__), 'lib/play-apidoc.rb')

args = PlayApidoc::Args.parse(ARGV)

versions = {
  :scala => "2.11.6",
  :sbt => "0.13.7",
  :play => "2.3.8"
}

def ask(message, default=nil)
  response = nil
  while response.to_s.strip == ""
    print message
    if default
      print " [#{default}]"
    end
    print ": "

    response = $stdin.gets.strip
    if response == ""
      response = default
    end
  end
  response
end

def latest_version(org, app)
  return "test"
  cmd = "export LIMIT=1 && apidoc list versions #{org} #{app}"
  `#{cmd}`.strip.split.first
end

def app_exists?(org, app)
  latest_version(org, app).nil? ? false : true
end

def get_package_name(path)
  IO.readlines(path).each do |l|
    l.strip!
    if l.match(/^package/)
      return l.split[1].sub(/\.models$/, '')
    end
  end

  raise "Could not find package name from file at #{path}"
end

if !system("which apidoc")
  puts "ERROR: Could not find apidoc-cli"
  puts "  Please install apidoc-cli and ensure the apidoc command is in your path."
  puts "  See https://github.com/gilt/apidoc-cli"
  exit(1)
end

name = args[:name] || ask("name")
apidoc_org = args[:apidoc_org] || ask("apidoc org", "gilt")

if apidoc_app = args[:apidoc_app]
  if !app_exists?(apidoc_org, apidoc_app)
    puts "ERROR: Application #{apidoc_org}/#{apidoc_app} not found"
    exit(1)
  end
else
  while apidoc_app.nil?
    apidoc_app = ask("apidoc application")
    if !app_exists?(apidoc_org, apidoc_app)
      puts "  ERROR: #{apidoc_org}/#{apidoc_app} not found in apidoc"
      apidoc_app = nil
    end
  end
end

target = "/tmp/#{apidoc_org}-#{apidoc_app}.#{Process.pid}"

copier = PlayApidoc::Copier.new(:name => name,
                                :apidoc_org => apidoc_org,
                                :apidoc_app => apidoc_app,
                                :db_name => args[:db_name] || ask("database name", apidoc_app.split("\-").first),
                                :db_user => args[:db_user] || ask("database user", "api"),
                                :scala_version => versions[:scala],
                                :sbt_version => versions[:sbt],
                                :play_version => versions[:play]
                                )

puts "Copying template to #{target}"
copier.mkdir(target)
copier.copy_dir("template", target)
puts ""

Dir.chdir(target) do
  if !system("apidoc update")
    puts "ERROR: apidoc update failed"
    puts ""
    exit(1)
  end
end

## Find package name
package_name = get_package_name(File.join(target, "generated/app/ApidocApi.scala"))

puts ""
puts "Substituting package name[#{package_name}]"
PlayApidoc::Copier.new(:package_name => package_name).copy_dir(target, target)

puts ""
puts "Application bootstrapped to #{target}"
puts ""

