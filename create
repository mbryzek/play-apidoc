#!/usr/bin/env ruby

# Example:
#   ./create --org gilt --app quality --db_name quality --db_user api
#
# All parameters are optional - you will be prompted to specify each as needed

load File.join(File.dirname(__FILE__), 'lib/play-apidoc.rb')

args = PlayApidoc::Args.parse(ARGV)

def ask(message, default=nil)
  response = nil
  while response.to_s.strip == ""
    print message
    if default
      print " [#{default}]"
    end
    print ": "

    response = $stdin.gets.strip
    if response == ""
      response = default
    end
  end
  response
end

def latest_version(org, app)
  return "test"
  cmd = "export LIMIT=1 && apidoc list versions #{org} #{app}"
  `#{cmd}`.strip.split.first
end

def app_exists?(org, app)
  latest_version(org, app).nil? ? false : true
end

if !system("which apidoc")
  puts "ERROR: Could not find apidoc-cli"
  puts "  Please install apidoc-cli and ensure the apidoc command is in your path."
  puts "  See https://github.com/gilt/apidoc-cli"
  exit(1)
end

org = args[:org] || ask("apidoc org", "gilt")

if app = args[:app]
  if !app_exists?(org, app)
    puts "ERROR: Application #{org}/#{app} not found"
    exit(1)
  end
else
  while app.nil?
    app = ask("apidoc application")
    if !app_exists?(org, app)
      puts "  ERROR: #{org}/#{app} not found in apidoc"
      app = nil
    end
  end
end

copier = PlayApidoc::Copier.new(:apidoc_org => org,
                                :apidoc_app => app,
                                :db_name => args[:db_name] || ask("database name", app.split("\-").first),
                                :db_user => args[:db_user] || ask("database user", "api"))

target = "/tmp/#{org}-#{app}.#{Process.pid}"

puts "Copying template to #{target}"
copier.mkdir(target)
copier.copy_dir("template", target)
puts ""

Dir.chdir(target) do
  system("apidoc update")
end

puts ""
puts "Application bootstrapped to #{target}"
puts ""

